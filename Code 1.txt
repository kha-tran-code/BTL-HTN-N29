/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2024 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "cmsis_os.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */

/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
SPI_HandleTypeDef hspi1;

TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

UART_HandleTypeDef huart1;

osThreadId BluetoothTaskHandle;
osThreadId ObstacleAvoidanHandle;
osThreadId DistanceTaskHandle;

/* USER CODE BEGIN PV */
#define TRIG_PIN GPIO_PIN_9
#define TRIG_PORT GPIOA
#define ECHO_PIN GPIO_PIN_8
#define ECHO_PORT GPIOA
uint32_t pMillis;
uint32_t Value1 = 0;
uint32_t Value2 = 0;
uint16_t Distance  = 0;  // cm

//uint8_t ps2Data[9];  // Mảng lưu dữ liệu từ tay cầm PS2
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_TIM1_Init(void);
static void MX_TIM2_Init(void);
static void MX_USART1_UART_Init(void);
static void MX_SPI1_Init(void);
void BluetoothTaskFunction(void const * argument);
void ObstacleAvoidanceTaskFunction(void const * argument);
void DistanceTaskFunction(void const * argument);

/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
char rx_data[1];
float khoangcach;
float gioihan = 20.0;
float khoangcachtrai, khoangcachphai;
void tien(void)
{
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1); //Trái
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, 1);
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, 0);

	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 0); //Phải
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 1);
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 1);
}

void lui(void)
{
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0); //Trái
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, 0);
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, 1);

	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 1); //Phải
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 0);
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 0);
}

void phai(void)
{
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1); //Trái
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, 1);
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, 0);

	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 1); //Phải
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 0);
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 0);
}

void trai(void)
{
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0); //Trái
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, 0);
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, 1);

	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 0); //Phải
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 1);
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 1);
}

void tien_trai(void)
{
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0); //Trái
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, 0);
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, 0);

	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 0); //Phải
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 1);
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 1);
}

void tien_phai(void)
{
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1); //Trái
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, 1);
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, 0);

	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 0); //Phải
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 0);
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 0);
}

void lui_phai(void)
{
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0); //Trái
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, 0);
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, 1);

	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 0); //Phải
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 0);
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 0);
}

void lui_trai(void)
{
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0); //Trái
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, 0);
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, 0);

	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 1); //Phải
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 0);
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 0);
}

void Stop(void)
{
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0); //Trái
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, 0);
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, 0);

	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 0); //Phải
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 0);
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 0);
}

void speed10(void)
{
	  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 0);
	  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, 0);
}

void speed20(void)
{
	  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 2500);
	  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, 2500);
}

void speed30(void)
{
	  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 3000);
	  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, 3000);
}

void speed40(void)
{
	  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 4000);
	  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, 4000);
}

void speed50(void)
{
	  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 5000);
	  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, 5000);
}

void speed60(void)
{
	  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 6000);
	  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, 6000);
}

void speed70(void)
{
	  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 7000);
	  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, 7000);
}

void speed80(void)
{
	  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 8000);
	  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, 8000);
}

void speed90(void)
{
	  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 9000);
	  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, 9000);
}

void speed100(void)
{
	  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 9999);
	  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, 9999);
}
void quaycbsangtrai(void)
{
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 2000);
    HAL_Delay(1000);
}

void quaycbsangphai(void)
{
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 1000);
    HAL_Delay(1000);
}

void resetcb(void)
{
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 1450);
    HAL_Delay(1000);
}

float dokhoangcach(void)
{
	//HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);  // pull the TRIG pin low
    HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_SET);  // pull the TRIG pin HIGH
    __HAL_TIM_SET_COUNTER(&htim1, 0);
    while (__HAL_TIM_GET_COUNTER (&htim1) < 10);  // wait for 10 us
    HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);  // pull the TRIG pin low

    pMillis = HAL_GetTick(); // used this to avoid infinite while loop  (for timeout)
    // wait for the echo pin to go high
    while (!(HAL_GPIO_ReadPin (ECHO_PORT, ECHO_PIN)) && pMillis + 10 >  HAL_GetTick());
    Value1 = __HAL_TIM_GET_COUNTER (&htim1);

    pMillis = HAL_GetTick(); // used this to avoid infinite while loop (for timeout)
    // wait for the echo pin to go low
    while ((HAL_GPIO_ReadPin (ECHO_PORT, ECHO_PIN)) && pMillis + 50 > HAL_GetTick());
    Value2 = __HAL_TIM_GET_COUNTER (&htim1);

    Distance = (Value2-Value1)* 0.034/2;
    khoangcach = Distance;
    return khoangcach;
}

void Tranhvatcan(void)
{
	  	  khoangcach = 0;
	  	  dokhoangcach();
	  	  if (khoangcach > gioihan || khoangcach == 0)
	  	  {
	  		  tien();
	  		  speed20();
	  	  }
	  	  else
	  	  {
	  		  Stop();
	  		  speed10();
	  		  HAL_Delay(200);
	  		  quaycbsangtrai();
	  		  dokhoangcach();
	  		  khoangcachtrai = khoangcach;
	  		  resetcb();
	  		  quaycbsangphai();
	  		  dokhoangcach();
	  		  khoangcachphai = khoangcach;
	  		  resetcb();
	  		  if (khoangcachtrai < 10 && khoangcachphai < 10)
	  		  {
	  			  lui();
	  			  speed20();
	  			  HAL_Delay(300);
	  			  Stop();
	  			  speed10();
	  			  HAL_Delay(200);
	  			  phai();
	  			  speed30();
	  			  HAL_Delay(700);
	  			  Stop();
	  			  speed10();
	  			  HAL_Delay(200);
	  		  }
	  		  else
	  		  {
	  			  if (khoangcachphai >= khoangcachtrai)
	  			  {
	  				  lui();
	  				  speed20();
	  				  HAL_Delay(300);
	  				  Stop();
	  				  speed10();
	  				  HAL_Delay(200);
	  				  phai();
	  				  speed30();
	  				  HAL_Delay(500);
	  				  Stop();
	  				  speed10();
	  				  HAL_Delay(200);
	  			  }
	  			  if (khoangcachphai < khoangcachtrai)
	  			  {
	  				  lui();
	  				  speed20();
	  				  HAL_Delay(300);
	  				  Stop();
	  				  speed10();
	  				  HAL_Delay(200);
	  				  trai();
	  				  speed30();
	  				  HAL_Delay(500);
	  				  Stop();
	  				  speed10();
	  				  HAL_Delay(200);
	  			  }
	  		  }
	  	  }
}

void Bluetooth(void)
{
		HAL_UART_Receive_IT(&huart1, (uint8_t *)rx_data, 1);
		  switch (rx_data[0]) {
		        case 'F':
		        	tien();
		        	break;
		        case 'B':
		        	lui();
		        	break;
		        case 'L':
		        	trai();
		        	break;
		        case 'R':
		        	phai();
		        	break;
		        case 'I':
		        	tien_phai();
		        	break;
		        case 'G':
		        	tien_trai();
		        	break;
		        case 'J':
		        	lui_phai();
		        	break;
		        case 'H':
		        	lui_trai();
		        	break;
		        case 'S':
		        	Stop();
		        	break;

		        case 'W':
		        	quaycbsangtrai();
		        	break;
		        case 'U':
		        	quaycbsangphai();
		        	break;
		        case 'V':
		        	resetcb();
		        	break;

		        case '1':
		        	speed10();
		        	break;
		        case '2':
		        	speed20();
		        	break;
		        case '3':
		        	speed30();
		        	break;
		        case '4':
		        	speed40();
		        	break;
		        case '5':
		        	speed50();
		        	break;
		        case '6':
		        	speed60();
		        	break;
		        case '7':
		        	speed70();
		        	break;
		        case '8':
		        	speed80();
		        	break;
		        case '9':
		        	speed90();
		        	break;
		        case 'q':
		        	speed100();
		        	break;

		        default:
		        	Stop();
		        	break;
		        }
}
/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_TIM1_Init();
  MX_TIM2_Init();
  MX_USART1_UART_Init();
  MX_SPI1_Init();
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0);

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2); // Servo RC
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4); // L298N RC

  HAL_TIM_Base_Start(&htim1);

  resetcb();
  HAL_Delay(500);
  /* USER CODE END 2 */

  /* USER CODE BEGIN RTOS_MUTEX */
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of BluetoothTask */
  osThreadDef(BluetoothTask, BluetoothTaskFunction, osPriorityAboveNormal, 0, 128);
  BluetoothTaskHandle = osThreadCreate(osThread(BluetoothTask), NULL);

  /* definition and creation of ObstacleAvoidan */
  osThreadDef(ObstacleAvoidan, ObstacleAvoidanceTaskFunction, osPriorityNormal, 0, 128);
  ObstacleAvoidanHandle = osThreadCreate(osThread(ObstacleAvoidan), NULL);

  /* definition and creation of DistanceTask */
  osThreadDef(DistanceTask, DistanceTaskFunction, osPriorityLow, 0, 128);
  DistanceTaskHandle = osThreadCreate(osThread(DistanceTask), NULL);

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
  hspi1.Init.Mode = SPI_MODE_MASTER;
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi1.Init.NSS = SPI_NSS_SOFT;
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi1.Init.CRCPolynomial = 10;
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}

/**
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
  htim1.Init.Prescaler = 71;
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim1.Init.Period = 65535;
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim1.Init.RepetitionCounter = 0;
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}

/**
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};
  TIM_OC_InitTypeDef sConfigOC = {0};

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
  htim2.Init.Prescaler = 71;
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim2.Init.Period = 9999;
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
  {
    Error_Handler();
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
  sConfigOC.Pulse = 0;
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
  {
    Error_Handler();
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
  {
    Error_Handler();
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);

}

/**
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
  huart1.Init.BaudRate = 9600;
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);

  /*Configure GPIO pins : PA2 PA3 PA4 PA5
                           PA6 PA7 PA9 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/* USER CODE BEGIN Header_BluetoothTaskFunction */
/**
  * @brief  Function implementing the BluetoothTask thread.
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_BluetoothTaskFunction */
void BluetoothTaskFunction(void const * argument)
{
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  Tranhvatcan();
	  //Bluetooth();
	  //osDelay(1); //Hàm giúp task ngủ 1ms
  }
  /* USER CODE END 5 */
}

/* USER CODE BEGIN Header_ObstacleAvoidanceTaskFunction */
/**
* @brief Function implementing the ObstacleAvoidan thread.
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ObstacleAvoidanceTaskFunction */
void ObstacleAvoidanceTaskFunction(void const * argument)
{
  /* USER CODE BEGIN ObstacleAvoidanceTaskFunction */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
  }
  /* USER CODE END ObstacleAvoidanceTaskFunction */
}

/* USER CODE BEGIN Header_DistanceTaskFunction */
/**
* @brief Function implementing the DistanceTask thread.
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_DistanceTaskFunction */
void DistanceTaskFunction(void const * argument)
{
  /* USER CODE BEGIN DistanceTaskFunction */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
  }
  /* USER CODE END DistanceTaskFunction */
}

/**
  * @brief  Period elapsed callback in non blocking mode
  * @note   This function is called  when TIM3 interrupt took place, inside
  * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
